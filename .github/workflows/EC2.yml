name: EC2

on:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: programa
          path: ./programa

      - name: Move artifact to root
        run: |
          mv ./programa/main ./main
          ls -l ./main
        
      - name: Create target directory on EC2
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          user: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command: mkdir -p ${{ secrets.REMOTE_TARGET }}

      - name: Upload binary to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./main"
          target: ${{ secrets.REMOTE_TARGET }}

      - name: Run application on EC2
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          user: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command: |
            cd ${{ secrets.REMOTE_TARGET }}
            echo "Configurando vari√°veis de ambiente..."
            export HOST=${{ secrets.DB_HOST }}
            export USER=${{ secrets.DB_USER }}
            export PASSWORD=${{ secrets.DB_PASSWORD }}
            export DBNAME=${{ secrets.DB_NAME }}
            export DBPORT=${{ secrets.DB_PORT }}
            export PORT=8000
            echo "üîß Verificando se o PostgreSQL est√° instalado..."
            if ! command -v psql > /dev/null; then
              echo "‚ö†Ô∏è PostgreSQL n√£o encontrado. Instalando..."
              sudo apt-get update -y
              sudo apt-get install -y postgresql postgresql-contrib
              echo "‚úÖ PostgreSQL instalado com sucesso!"
            else
              echo "‚úÖ PostgreSQL j√° est√° instalado!"
            fi   
            echo "üîç Verificando se o PostgreSQL est√° rodando..."
            if sudo systemctl is-active --quiet postgresql; then
              echo "‚úÖ PostgreSQL j√° est√° ativo!"
            else
              echo "‚ö†Ô∏è PostgreSQL n√£o est√° rodando. Tentando iniciar..."
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
              sleep 5
              if sudo systemctl is-active --quiet postgresql; then
                echo "‚úÖ PostgreSQL iniciado com sucesso!"
              else
                echo "‚ùå Falha ao iniciar o PostgreSQL!"
                exit 1
              fi
            fi 
            echo "‚öôÔ∏è Configurando banco de dados padr√£o..."
            sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${USER}';" | grep -q 1 || sudo -u postgres psql -c "CREATE ROLE ${USER} LOGIN PASSWORD '${PASSWORD}';"
            sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='${DBNAME}';" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE ${DBNAME} OWNER ${USER};"
            echo "‚úÖ Banco e usu√°rio configurados!"
            echo "üöÄ Iniciando aplica√ß√£o..."
            chmod +x main
            nohup ./main > nohup.out 2> nohup.err < /dev/null &
            sleep 5
            echo "üîç Verificando se a aplica√ß√£o est√° rodando..."
            if pgrep -f main > /dev/null; then
              echo "‚úÖ Processo do servidor Go est√° ativo!"
            else
              echo "‚ùå O processo n√£o foi encontrado! Verifique nohup.err."
              cat nohup.err
              exit 1
            fi
            echo "üåê Checando se a porta 8000 est√° escutando..."
            if sudo ss -tuln | grep -q ':8000'; then
              echo "‚úÖ Porta 8000 est√° aberta!"
            else
              echo "‚ö†Ô∏è Porta 8000 n√£o est√° escutando, pode ter falhado o start."
              cat nohup.err
            fi
